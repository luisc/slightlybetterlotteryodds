<!doctype html>

<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <title>Slightly Better Lottery Odds :: %{title}</title>
  <meta name="description" content="Slightly Better Lottery Odds">
  <meta name="author" content="luisc">

  <meta property="og:title" content="Slightly Better Lottery Odds %{title}">
  <meta property="og:type" content="website">
  <meta property="og:url" content="https://www.what.com/">
  <meta property="og:description" content="Charts of %{title} Lottery Ball Winners">
  <meta property="og:image" content="image.png">

  <link rel="icon" href="/favicon.ico">
  <link rel="icon" href="/favicon.svg" type="image/svg+xml">
  <link rel="apple-touch-icon" href="/apple-touch-icon.png">

  <!-- <link rel="stylesheet" href="css/styles.css?v=1.0"> -->
  <style type="text/css">
    @import "https://cdn.jsdelivr.net/npm/bulma@0.9.4/css/bulma.min.css";
    hr {
      margin: 10px 0;
    }

    .combinations p {
      text-align: center;
      font-weight: bold;
    }

    #yotta_guaranteed {
      display: none;
    }
  </style>
</head>

<body>

  <header>
    <nav id="menu" class="navbar" role="navigation" aria-label="main navigation">
      
      <a role="button" class="navbar-burger" aria-label="menu" aria-expanded="false" data-target="navMenu">
        <span aria-hidden="true"></span>
        <span aria-hidden="true"></span>
        <span aria-hidden="true"></span>
      </a>

      <div id="navMenu" class="navbar-menu">
        <div class="navbar-start">
          <a class="navbar-item" href="powerball.html">Powerball</a>
          <a class="navbar-item" href="mega_millions.html">Mega Millions</a>
          <a class="navbar-item" href="cash4life.html">Cash4Life</a>
          <a class="navbar-item" href="ny_lotto.html">NY Lotto</a>
          <a class="navbar-item" href="yotta.html">Yotta</a>
        </div>
      </div>
    </nav>
  </header>

  <section class="section">
    <div class="columns is-desktop">
      <div class="column">
        <h2 class="title">%{title} Generator</h2>
        <form id="generatorForm">
          <div class="field">
            <label for="quantity" class="label">How Many?</label> 
            <input type="number" name="quantity" id="quantity" class="input" placeholder="e.g. 5 (default)">
          </div>

          <div class="field">
            <div class="control">
              <div class="select">
                <select name="standard_deviations" id="standardDeviations">
                  <option value="0">Don't Exclude Any Numbers</option>
                  <option value="1" selected>Exclude not within ONE Standard Deviation</option>
                  <option value="2">Exclude not within TWO Standard Deviations</option>
                  <option value="3">Exclude not within THREE Standard Deviations</option>
                </select>
              </div>
            </div>
          </div>
          
          <div class="field">
            <div class="control">
              <button class="button is-primary">Generate</button>
            </div>
          </div>

          <div class="field">
            <div class="control">
              <button id="yotta_guaranteed" class="button is-info">Generate Yotta Guaranteed</button>
            </div>
          </div>
        </form>
      </div>

      <div class="column">
        <h3 class="title">Generated Combos</h3>
        <div id="combinations" class="block">
          <p>Future unlikely numbers here!</p>
        </div>
      </div>
    </div>
  </section>

  <section class="section">
    <h2 class="title">Charts</h2>
    <div>
      <canvas id="chart_white_balls"></canvas>
    </div>

    <hr>

    <div>
      <canvas id="chart_yellow_ball"></canvas>
    </div>
  </section>

  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  
  <script>
    function recolorChart(chart, mean, standard_deviation, colors) {
      var dataset = chart.data.datasets[0];
      for (var i = 0; i < dataset.data.length; i++) {
        if (dataset.data[i] < (mean - standard_deviation)) {
          dataset.backgroundColor[i] = colors.color3;
        } else {
          dataset.backgroundColor[i] = colors.color1;
        }
      }

      chart.update();
    }

    const chartColors = {
      color1: 'rgba(18, 78, 120, 0.5)',
      color2: 'rgba(242, 187, 5, 0.5)',
      color3: 'rgba(215, 78, 9, 0.5)',
      color4: 'rgba(18, 78, 120, 0.5)'
    };

    const labels_white_balls = %{labels_white_balls};
    const data_white_balls = %{data_white_balls};
    const white_ball_quantity = %{white_ball_quantity};

    const labels_yellow_ball = %{labels_yellow_ball};
    const data_yellow_ball = %{data_yellow_ball};
    const yellow_ball_quantity = %{yellow_ball_quantity};

    const white_balls_data = {
      labels: labels_white_balls,
      datasets: [{
        label: '%{title} White Balls from %{start_date}',
        data: data_white_balls,
        backgroundColor: [chartColors.color1],
        borderWidth: 1
      }]
    };

    const config_white_balls = {
      type: 'bar',
      data: white_balls_data,
      options: {
        scales: {
          y: {
            beginAtZero: true
          }
        },
        plugins: {
          subtitle: {
            display: true,
            text: "Mean: %{white_ball_mean}, Standard Deviation: %{white_ball_standard_deviation}"
          }
        }
      },
    };

    const chart_white_balls = new Chart(
      document.getElementById('chart_white_balls'),
      config_white_balls
    );

    recolorChart(chart_white_balls, %{white_ball_mean}, %{white_ball_standard_deviation}, chartColors);

    const yellow_ball_data = {
      labels: labels_yellow_ball,
      datasets: [{
        label: '%{title} Yellow Ball from %{start_date}',
        data: data_yellow_ball,
        backgroundColor: [chartColors.color1],
        borderWidth: 1
      }]
    };

    const config_yellow_ball = {
      type: 'bar',
      data: yellow_ball_data,
      options: {
        scales: {
          y: {
            beginAtZero: true
          }
        },
        plugins: {
          subtitle: {
            display: true,
            text: "Mean: %{yellow_ball_mean}, Standard Deviation: %{yellow_ball_standard_deviation}"
          }
        }
      },
    };

    const chart_yellow_ball = new Chart(
      document.getElementById('chart_yellow_ball'),
      config_yellow_ball
    );

    recolorChart(chart_yellow_ball, %{yellow_ball_mean}, %{yellow_ball_standard_deviation}, chartColors);
  </script>

  <script type="text/javascript">
    function generateCombinations(event) {
      var quantity = parseInt(document.getElementById('quantity').value);
      var standardDeviations = parseInt(document.getElementById('standardDeviations').value);

      var white_ball_candidates = filterCandidates(labels_white_balls, data_white_balls, %{white_ball_mean}, %{white_ball_standard_deviation}, standardDeviations);
      var yellow_ball_candidates = filterCandidates(labels_yellow_ball, data_yellow_ball, %{yellow_ball_mean}, %{yellow_ball_standard_deviation}, standardDeviations)

      if (event.submitter.id == "yotta_guaranteed") {
        quantity = 63;
      } else if (isNaN(quantity)) {
        quantity = 5;
      }

      var result, html = '';
      combos.innerHTML = html;
      
      for (var ii = 1; ii <= quantity; ii++) {
        result = pick(white_ball_candidates, white_ball_quantity);

        if (event.submitter.id == "yotta_guaranteed") {
          result = result.concat(ii);
        } else {
          result = result.concat( pick(yellow_ball_candidates, yellow_ball_quantity) );
        }
        
        html += '<div class="columns combinations is-mobile">';
        for (var jj = 0; jj < result.length; jj++) {
          if (jj < result.length - 1) {
            html += '<div class="column"><p class="has-background-primary has-text-white-ter">' + result[jj] + "</p></div>";
          } else {
            html += '<div class="column"><p class="has-background-info has-text-white-ter">' + result[jj] + "</p></div>";
          }
          
        }
        html += '</div>';
      }

      combos.innerHTML = html;
      
      event.preventDefault();
    }

    function filterCandidates(candidates, candidate_values, mean, standard_deviation, within) {

      if (within == 0) {
        return candidates;
      }

      var new_candidates = [];
      var lower_bound_value = mean - standard_deviation * within;

      for (var ii = 0; ii < candidate_values.length; ii++) {
        if (candidate_values[ii] >= lower_bound_value) {
          new_candidates.push(candidates[ii]);
        }
      }

      return new_candidates;
    }

    function pick(candidates, quantity) {
      var combination = [];
      var tmp_candidates = candidates.slice();
      var index_selected;

      for (var ball = 1; ball <= quantity; ball++) {
        index_selected = Math.floor(Math.random() * tmp_candidates.length);
        combination.push(parseInt(tmp_candidates[index_selected]));
        tmp_candidates.splice(index_selected, 1);
      }

      return combination.sort( function(a,b) { return a - b; });
    }

    const form = document.getElementById('generatorForm');
    const combos = document.getElementById('combinations');
    form.addEventListener('submit', generateCombinations);
  </script>

  <script type="text/javascript">
    document.addEventListener('DOMContentLoaded', () => {

      // Get all "navbar-burger" elements
      const $navbarBurgers = Array.prototype.slice.call(document.querySelectorAll('.navbar-burger'), 0);

      // Add a click event on each of them
      $navbarBurgers.forEach( el => {
        el.addEventListener('click', () => {

          // Get the target from the "data-target" attribute
          const target = el.dataset.target;
          const $target = document.getElementById(target);

          // Toggle the "is-active" class on both the "navbar-burger" and the "navbar-menu"
          el.classList.toggle('is-active');
          $target.classList.toggle('is-active');

        });
      });

      if ('%{title}' == "Yotta") {
        document.getElementById('yotta_guaranteed').style.display = "inline-flex";
      }
      
    });
  </script>

</body>
</html>


